/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  IconNames,
} from './components/icon/icon';
import {
  IconNames as IconNames1,
} from './components/icon/icon';
import {
  Collection,
} from '@stencila/schema';

export namespace Components {
  interface StencilaActionMenu {
    /**
    * List of buttons to include in Action Menu.
    */
    'actions': HTMLButtonElement[];
    /**
    * Defines whether the Action Menu can be collapsed and expanded
    */
    'expandable': boolean;
  }
  interface StencilaButton {
    /**
    * Screen-reader accessible label to read out.
    */
    'ariaLabel': string;
    /**
    * The type of button to render, options correspond to HTML Button `type` attribute. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button Only applies if the button is not an anchor link.
    */
    'buttonType': 'button' | 'submit' | 'reset';
    /**
    * Function to be called when clicking the button. Passed function will be wrapped in a Promise, and the result returned.
    */
    'clickHandlerProp': (e?: MouseEvent) => unknown;
    /**
    * If true, prevents the user from interacting with the button.
    */
    'disabled': boolean;
    /**
    * If an `href` property is provided, button will be rendered using an `<a>` anchor tag.
    */
    'href'?: string;
    /**
    * Name of the icon to render inside the button
    * @see Icon component for possible values
    */
    'icon': IconNames;
    /**
    * If true, removes extra padding from Icon inside the button TODO: See if we can automatically infer removal of padding through CSS
    */
    'iconOnly': boolean;
    /**
    * If true, disables the button, shows a loading icon, and prevents the click handler from firing
    */
    'isLoading': boolean;
    /**
    * The displayed text of the Tab.
    */
    'isSecondary': boolean;
    /**
    * The displayed text of the Button.
    */
    'size': 'xsmall' | 'small' | 'default' | 'large';
  }
  interface StencilaCodeChunk {
    /**
    * Whether the code section is visible or not
    */
    'isCodeCollapsedProp': boolean;
  }
  interface StencilaCodeExpression {}
  interface StencilaIcon {
    'icon': IconNames;
  }
  interface StencilaTab {
    /**
    * The link the tab should navigate to
    */
    'href': string;
    /**
    * Indicates whether the current tab is "selected"
    */
    'isSelected': boolean;
    /**
    * The displayed text of the Tab
    */
    'label': string;
  }
  interface StencilaTabList {
    /**
    * The link the tab should navigate to
    */
    'href': string;
    /**
    * The displayed text of the Tab
    */
    'label': string;
    /**
    * A list of string values to use as tab labels
    */
    'tabs': string[];
  }
  interface StencilaToc {
    /**
    * Where to grab the headings to build the table of contents.
    */
    'contentSelector': string;
    /**
    * Which headings to grab inside of the contentSelector element.
    */
    'headingSelector': string;
  }
  interface StencilaTooltip {
    /**
    * The text content of the Tooltip.
    */
    'text': string;
  }
  interface StencilaTooltipElement {}
  interface StencilaVerticalNav {
    'collection'?: Collection;
  }
}

declare global {


  interface HTMLStencilaActionMenuElement extends Components.StencilaActionMenu, HTMLStencilElement {}
  const HTMLStencilaActionMenuElement: {
    prototype: HTMLStencilaActionMenuElement;
    new (): HTMLStencilaActionMenuElement;
  };

  interface HTMLStencilaButtonElement extends Components.StencilaButton, HTMLStencilElement {}
  const HTMLStencilaButtonElement: {
    prototype: HTMLStencilaButtonElement;
    new (): HTMLStencilaButtonElement;
  };

  interface HTMLStencilaCodeChunkElement extends Components.StencilaCodeChunk, HTMLStencilElement {}
  const HTMLStencilaCodeChunkElement: {
    prototype: HTMLStencilaCodeChunkElement;
    new (): HTMLStencilaCodeChunkElement;
  };

  interface HTMLStencilaCodeExpressionElement extends Components.StencilaCodeExpression, HTMLStencilElement {}
  const HTMLStencilaCodeExpressionElement: {
    prototype: HTMLStencilaCodeExpressionElement;
    new (): HTMLStencilaCodeExpressionElement;
  };

  interface HTMLStencilaIconElement extends Components.StencilaIcon, HTMLStencilElement {}
  const HTMLStencilaIconElement: {
    prototype: HTMLStencilaIconElement;
    new (): HTMLStencilaIconElement;
  };

  interface HTMLStencilaTabElement extends Components.StencilaTab, HTMLStencilElement {}
  const HTMLStencilaTabElement: {
    prototype: HTMLStencilaTabElement;
    new (): HTMLStencilaTabElement;
  };

  interface HTMLStencilaTabListElement extends Components.StencilaTabList, HTMLStencilElement {}
  const HTMLStencilaTabListElement: {
    prototype: HTMLStencilaTabListElement;
    new (): HTMLStencilaTabListElement;
  };

  interface HTMLStencilaTocElement extends Components.StencilaToc, HTMLStencilElement {}
  const HTMLStencilaTocElement: {
    prototype: HTMLStencilaTocElement;
    new (): HTMLStencilaTocElement;
  };

  interface HTMLStencilaTooltipElement extends Components.StencilaTooltip, HTMLStencilElement {}
  const HTMLStencilaTooltipElement: {
    prototype: HTMLStencilaTooltipElement;
    new (): HTMLStencilaTooltipElement;
  };

  interface HTMLStencilaTooltipElementElement extends Components.StencilaTooltipElement, HTMLStencilElement {}
  const HTMLStencilaTooltipElementElement: {
    prototype: HTMLStencilaTooltipElementElement;
    new (): HTMLStencilaTooltipElementElement;
  };

  interface HTMLStencilaVerticalNavElement extends Components.StencilaVerticalNav, HTMLStencilElement {}
  const HTMLStencilaVerticalNavElement: {
    prototype: HTMLStencilaVerticalNavElement;
    new (): HTMLStencilaVerticalNavElement;
  };
  interface HTMLElementTagNameMap {
    'stencila-action-menu': HTMLStencilaActionMenuElement;
    'stencila-button': HTMLStencilaButtonElement;
    'stencila-code-chunk': HTMLStencilaCodeChunkElement;
    'stencila-code-expression': HTMLStencilaCodeExpressionElement;
    'stencila-icon': HTMLStencilaIconElement;
    'stencila-tab': HTMLStencilaTabElement;
    'stencila-tab-list': HTMLStencilaTabListElement;
    'stencila-toc': HTMLStencilaTocElement;
    'stencila-tooltip': HTMLStencilaTooltipElement;
    'stencila-tooltip-element': HTMLStencilaTooltipElementElement;
    'stencila-vertical-nav': HTMLStencilaVerticalNavElement;
  }
}

declare namespace LocalJSX {
  interface StencilaActionMenu {
    /**
    * List of buttons to include in Action Menu.
    */
    'actions'?: HTMLButtonElement[];
    /**
    * Defines whether the Action Menu can be collapsed and expanded
    */
    'expandable'?: boolean;
  }
  interface StencilaButton {
    /**
    * Screen-reader accessible label to read out.
    */
    'ariaLabel'?: string;
    /**
    * The type of button to render, options correspond to HTML Button `type` attribute. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button Only applies if the button is not an anchor link.
    */
    'buttonType'?: 'button' | 'submit' | 'reset';
    /**
    * Function to be called when clicking the button. Passed function will be wrapped in a Promise, and the result returned.
    */
    'clickHandlerProp'?: (e?: MouseEvent) => unknown;
    /**
    * If true, prevents the user from interacting with the button.
    */
    'disabled'?: boolean;
    /**
    * If an `href` property is provided, button will be rendered using an `<a>` anchor tag.
    */
    'href'?: string;
    /**
    * Name of the icon to render inside the button
    * @see Icon component for possible values
    */
    'icon'?: IconNames;
    /**
    * If true, removes extra padding from Icon inside the button TODO: See if we can automatically infer removal of padding through CSS
    */
    'iconOnly'?: boolean;
    /**
    * If true, disables the button, shows a loading icon, and prevents the click handler from firing
    */
    'isLoading'?: boolean;
    /**
    * The displayed text of the Tab.
    */
    'isSecondary'?: boolean;
    /**
    * The displayed text of the Button.
    */
    'size'?: 'xsmall' | 'small' | 'default' | 'large';
  }
  interface StencilaCodeChunk {
    /**
    * Whether the code section is visible or not
    */
    'isCodeCollapsedProp'?: boolean;
    'onCollapseAllCode'?: (event: CustomEvent<any>) => void;
  }
  interface StencilaCodeExpression {}
  interface StencilaIcon {
    'icon'?: IconNames;
  }
  interface StencilaTab {
    /**
    * The link the tab should navigate to
    */
    'href'?: string;
    /**
    * Indicates whether the current tab is "selected"
    */
    'isSelected'?: boolean;
    /**
    * The displayed text of the Tab
    */
    'label'?: string;
  }
  interface StencilaTabList {
    /**
    * The link the tab should navigate to
    */
    'href'?: string;
    /**
    * The displayed text of the Tab
    */
    'label'?: string;
    /**
    * A list of string values to use as tab labels
    */
    'tabs': string[];
  }
  interface StencilaToc {
    /**
    * Where to grab the headings to build the table of contents.
    */
    'contentSelector'?: string;
    /**
    * Which headings to grab inside of the contentSelector element.
    */
    'headingSelector'?: string;
  }
  interface StencilaTooltip {
    /**
    * The text content of the Tooltip.
    */
    'text': string;
  }
  interface StencilaTooltipElement {}
  interface StencilaVerticalNav {
    'collection'?: Collection;
  }

  interface IntrinsicElements {
    'stencila-action-menu': StencilaActionMenu;
    'stencila-button': StencilaButton;
    'stencila-code-chunk': StencilaCodeChunk;
    'stencila-code-expression': StencilaCodeExpression;
    'stencila-icon': StencilaIcon;
    'stencila-tab': StencilaTab;
    'stencila-tab-list': StencilaTabList;
    'stencila-toc': StencilaToc;
    'stencila-tooltip': StencilaTooltip;
    'stencila-tooltip-element': StencilaTooltipElement;
    'stencila-vertical-nav': StencilaVerticalNav;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'stencila-action-menu': LocalJSX.StencilaActionMenu & JSXBase.HTMLAttributes<HTMLStencilaActionMenuElement>;
      'stencila-button': LocalJSX.StencilaButton & JSXBase.HTMLAttributes<HTMLStencilaButtonElement>;
      'stencila-code-chunk': LocalJSX.StencilaCodeChunk & JSXBase.HTMLAttributes<HTMLStencilaCodeChunkElement>;
      'stencila-code-expression': LocalJSX.StencilaCodeExpression & JSXBase.HTMLAttributes<HTMLStencilaCodeExpressionElement>;
      'stencila-icon': LocalJSX.StencilaIcon & JSXBase.HTMLAttributes<HTMLStencilaIconElement>;
      'stencila-tab': LocalJSX.StencilaTab & JSXBase.HTMLAttributes<HTMLStencilaTabElement>;
      'stencila-tab-list': LocalJSX.StencilaTabList & JSXBase.HTMLAttributes<HTMLStencilaTabListElement>;
      'stencila-toc': LocalJSX.StencilaToc & JSXBase.HTMLAttributes<HTMLStencilaTocElement>;
      'stencila-tooltip': LocalJSX.StencilaTooltip & JSXBase.HTMLAttributes<HTMLStencilaTooltipElement>;
      'stencila-tooltip-element': LocalJSX.StencilaTooltipElement & JSXBase.HTMLAttributes<HTMLStencilaTooltipElementElement>;
      'stencila-vertical-nav': LocalJSX.StencilaVerticalNav & JSXBase.HTMLAttributes<HTMLStencilaVerticalNavElement>;
    }
  }
}


